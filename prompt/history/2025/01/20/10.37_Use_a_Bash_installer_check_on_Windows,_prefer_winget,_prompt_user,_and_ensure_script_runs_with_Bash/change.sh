#!/bin/sh
set -e
goal="Use a Bash installer check on Windows, prefer winget, prompt user, and ensure script runs with Bash"

echo "Plan:"
echo "1) Update 'executeAndForwardOutput.js' to spawn Bash on Windows, otherwise execute normally."
echo "2) Update 'package.json' postinstall to call our new 'installBashIfWindows.js'."
echo "3) Add or overwrite 'scripts/installBashIfWindows.js' to prompt the user for the preferred installation method (winget, choco, or manual) and explain why we need Bash (to run changesets generated by the LLM)."
echo "4) Output the complete final contents of each modified or new file."
echo "5) Do not edit files outside the working set."

# 1) Overwrite src/execute/executeAndForwardOutput.js
cat > src/execute/executeAndForwardOutput.js << 'EOF'
import { writeFile } from 'fs/promises';
import { spawn } from 'child_process';
import { makeExecutable } from './makeExecutable.js';
import { saveAuditTrail } from './saveAuditTrail.js';

async function executeAndForwardOutput(code, next) {
    try {
        if (!code || !code.startsWith('#!')) {
            throw new Error('Code does not start with a shebang');
        }

        await saveAuditTrail(code);

        await writeFile('./change.sh', code);
        await makeExecutable('./change.sh');

        let command;
        let args = [];
        let spawnOptions = {};

        if (process.platform === 'win32') {
            // On Windows, explicitly call Bash
            command = 'bash.exe';
            args = ['./change.sh'];
            spawnOptions.shell = false; 
        } else {
            // On other platforms, just execute the script with shell
            command = './change.sh';
            spawnOptions.shell = true;
        }

        const child = spawn(command, args, spawnOptions);

        let commandOutput = '';

        child.stdout.on('data', (data) => {
            console.log(`${data}`);
            commandOutput += data;
        });

        child.stderr.on('data', (data) => {
            console.error(`${data}`);
            commandOutput += data;
        });

        child.on('close', (exitCode) => {
            if (next && typeof next === 'function') {
                next(exitCode, commandOutput);
            }
        });
    } catch (err) {
        console.log(err);
    }
}

export { executeAndForwardOutput };
EOF

# 2) Overwrite package.json to include the new postinstall script call
cat > package.json << 'EOF'
{
  "name": "@aijunior/dev",
  "version": "0.3.22",
  "description": "Your AI Contributor which codes itself",
  "type": "module",
  "main": "src/main.js",
  "bin": {
    "junior": "dist/bin/web.js",
    "junior-web": "dist/bin/web.js",
    "junior-cli": "dist/bin/cli.js",
    "junior-init": "dist/bin/init.js",
    "junior-rollback": "dist/bin/rollback.js",
    "junior-news": "dist/bin/readGitHistoryToMd.js"
  },
  "scripts": {
    "cli": "node scripts/cli.js",
    "start": "node scripts/dev.js",
    "update-logo": "node ./scripts/updateLogo.js",
    "clear-branches": "node ./scripts/clearBranchesCommand.js $@",
    "test": "cypress open",
    "rollback": "node scripts/junior-rollback.js",
    "build:frontend": "cd ./src/frontend/ && vite build --emptyOutDir",
    "build:backend": "cd src/backend && rollup --config rollup.config.js",
    "dev": "npm run start",
    "build": "npm run build:frontend && npm run build:backend",
    "postinstall": "node scripts/installBashIfWindows.js && node scripts/postinstall.js"
  },
  "keywords": [
    "cli",
    "uppercase"
  ],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@homebridge/node-pty-prebuilt-multiarch": "^0.11.14",
    "@types/js-yaml": "^4.0.5",
    "autoprefixer": "^10.4.14",
    "chatgpt": "^5.2.4",
    "cors": "^2.8.5",
    "ejs": "^3.1.9",
    "express": "^4.18.2",
    "highlight.js": "^11.8.0",
    "js-yaml": "^4.1.0",
    "markdown-it": "^13.0.1",
    "marked": "^5.1.0",
    "sanitize-filename": "^1.6.3",
    "sharp": "^0.32.4",
    "simple-git": "^3.19.1",
    "solid-js": "^1.7.7",
    "tailwindcss": "^3.3.3",
    "ws": "^8.13.0",
    "xterm": "^5.3.0"
  },
  "directories": {
    "doc": "docs"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tisztamo/Junior.git"
  },
  "bugs": {
    "url": "https://github.com/tisztamo/Junior/issues"
  },
  "homepage": "https://github.com/tisztamo/Junior#readme",
  "devDependencies": {
    "@rollup/plugin-node-resolve": "^15.2.3",
    "postcss": "^8.4.26",
    "postcss-nested": "^6.0.1",
    "rollup-plugin-preserve-shebang": "^1.0.1",
    "vite": "^4",
    "vite-plugin-solid": "^2"
  },
  "files": [
    "dist/",
    "prompt/",
    "scripts/"
  ]
}
EOF

# 3) Create or overwrite scripts/installBashIfWindows.js
mkdir -p scripts
cat > scripts/installBashIfWindows.js << 'EOF'
import { execSync } from 'child_process';
import readline from 'readline';

function installBashIfWindows() {
  if (process.platform !== 'win32') {
    console.log("Not on Windows, skipping bash installation check.");
    return;
  }

  // Try "where bash"
  try {
    execSync('where bash', { stdio: 'ignore' });
    console.log("Bash found in PATH. No installation needed.");
  } catch (err) {
    // We did not find bash -> prompt user
    console.log("\nWe need Git Bash on Windows to execute changesets generated by the LLM.\n");
    console.log("Bash was not found on this system.\n");

    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    const question = `
Choose one of the following options to install Git Bash:
  1) winget
  2) choco
  3) Install manually
Enter your choice (1,2 or 3): `;

    rl.question(question, (answer) => {
      rl.close();
      if (answer === '1') {
        // Try winget install
        console.log("\nAttempting to install Git (with Bash) via winget...\n");
        try {
          execSync('winget install --id Git.Git -e --source winget', { stdio: 'inherit' });
          console.log("\nGit (with Bash) installed successfully via winget!\n");
        } catch (e) {
          console.log("\nFailed to install Git via winget. You may try the other options.\n");
          process.exit(1);
        }
      } else if (answer === '2') {
        // Try choco install
        console.log("\nAttempting to install Git (with Bash) via choco...\n");
        try {
          execSync('choco install git -y', { stdio: 'inherit' });
          console.log("\nGit (with Bash) installed successfully via choco!\n");
        } catch (e) {
          console.log("\nFailed to install Git via choco. You may try the other options.\n");
          process.exit(1);
        }
      } else {
        // Manual instructions
        console.log("\nPlease install Git for Windows manually from: https://git-scm.com/download/win");
        console.log("Once Git is installed, 'bash' should be in your PATH.\n");
        process.exit(1);
      }
    });
  }
}

// If called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  installBashIfWindows();
}

export { installBashIfWindows };
EOF

echo "\033[32mDone: $goal\033[0m\n"
