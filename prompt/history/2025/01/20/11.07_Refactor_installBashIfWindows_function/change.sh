#!/bin/sh
set -e

goal="Refactor installBashIfWindows function"

# Plan:
# 1. Create a new directory for the function.
# 2. Move and refactor the function.
# 3. Update the postinstall script to use the function.
# 4. Update package.json.
# 5. Remove the old file from Git.

echo "Plan:"
echo "1. Create a new directory for the function."
echo "2. Move and refactor the function."
echo "3. Update the postinstall script to use the function."
echo "4. Update package.json."
echo "5. Remove the old file from Git."

# Step 1: Create the new directory
mkdir -p scripts/postinstall

# Step 2: Refactor and move the installBashIfWindows function
cat > scripts/postinstall/installBashIfWindows.js << 'EOF'
import { execSync } from 'child_process';
import readline from 'readline';

export async function installBashIfWindows() {
  if (process.platform !== 'win32') {
    console.log("Not on Windows, skipping bash installation check.");
    return;
  }

  try {
    execSync('where bash', { stdio: 'ignore' });
    console.log("Bash found in PATH. No installation needed.");
  } catch (err) {
    console.log("\nWe need Git Bash on Windows to execute changesets generated by the LLM.\n");
    console.log("Bash was not found on this system.\n");

    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    const question = `
Choose one of the following options to install Git Bash:
  1) winget
  2) choco
  3) Install manually
Enter your choice (1,2 or 3): `;

    rl.question(question, (answer) => {
      rl.close();
      if (answer === '1') {
        try {
          console.log("\nAttempting to install Git (with Bash) via winget...\n");
          execSync('winget install --id Git.Git -e --source winget', { stdio: 'inherit' });
          console.log("\nGit (with Bash) installed successfully via winget!\n");
        } catch (e) {
          console.log("\nFailed to install Git via winget. You may try the other options.\n");
          process.exit(1);
        }
      } else if (answer === '2') {
        try {
          console.log("\nAttempting to install Git (with Bash) via choco...\n");
          execSync('choco install git -y', { stdio: 'inherit' });
          console.log("\nGit (with Bash) installed successfully via choco!\n");
        } catch (e) {
          console.log("\nFailed to install Git via choco. You may try the other options.\n");
          process.exit(1);
        }
      } else {
        console.log("\nPlease install Git for Windows manually from: https://git-scm.com/download/win");
        console.log("Once Git is installed, 'bash' should be in your PATH.\n");
        process.exit(1);
      }
    });
  }
}
EOF

echo "Refactored and moved installBashIfWindows function."

# Step 3: Update the postinstall script
cat > scripts/postinstall.js << 'EOF'
import { installBashIfWindows } from './postinstall/installBashIfWindows.js';
import { execSync } from 'child_process';

export async function validateNodePty() {
  try {
    console.log('Validating prebuilt binaries for node-pty...');
    execSync('node -e "require(\'@homebridge/node-pty-prebuilt-multiarch\')"', { stdio: 'inherit' });
    console.log('Validation successful.');
  } catch (error) {
    console.error('Validation failed. Please check your setup.');
    process.exit(1);
  }
}

await installBashIfWindows();
await validateNodePty();
EOF

echo "Updated postinstall script to use the refactored function."

# Step 4: Update package.json
jq '.scripts.postinstall = "node scripts/postinstall.js"' package.json > package.json.tmp && mv package.json.tmp package.json

echo "Updated package.json to use the new postinstall script."

# Step 5: Remove the old file from Git
git rm scripts/installBashIfWindows.js

echo "Removed the old installBashIfWindows.js file from Git."

# Completion
echo "\033[32mDone: $goal\033[0m\n"
