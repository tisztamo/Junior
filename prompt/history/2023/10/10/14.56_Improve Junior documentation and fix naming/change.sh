#!/bin/sh
set -e

goal="Improve Junior documentation and fix naming"
echo "Plan:"
echo "1. Update usage.md to recommend and guide through a global installation."
echo "2. Correct the naming of ChatGPT in README.md."

# 1. Update ./docs/usage.md to recommend global installation and adapt usage instructions.
cat > ./docs/usage.md << EOF
# Developing External Projects with Junior

## Installation

Install Junior globally by running the following command:

\`\`\`
npm install -g @aijunior/dev
\`\`\`
Additionally, you can install the "Junior" vscode extension from the vscode extension marketplace.

## Initialization

Navigate to the project directory where you want to work with Junior and initialize the necessary files with the command:

\`\`\`
junior-init
\`\`\`

This will create the following files:

\`\`\`
.gitignore
prompt/projectSpecifics.md
prompt.yaml
\`\`\`

The Task Interaction Files (TIF) will be gitignored:
  - \`prompt.yaml\`, the prompt descriptor filled by the user ([descriptor.md](./descriptor.md))
  - \`prompt.md\`, the generated prompt by Junior
  - \`change.sh\`, the changeset generated by the language model

### Project Specifics

\`prompt/projectSpecifics.md\` is used to provide instructions about the codebase that Junior is working on, like preferred tools. It is important to keep this file minimal as it will be included in most prompts, and unnecessary complexity may result in the language model losing track and failing to solve the task.

## Starting Junior

Start Junior within your project directory with:

\`\`\`
junior-web
\`\`\`

For more information about the web interface, please refer to [web.md](./web.md).
EOF
echo "\033[32mDone: Update usage.md with global installation instructions and adapted usage\033[0m\n"

# 2. Correct the naming in README.md
cat > ./docs/README.md << EOF
# Junior - Your AI-first IDE 

[![Video: Junior codes itself](/assets/video_cover.jpg)](https://youtu.be/NL4uFJSvfW0)

*"Video: Junior codes itself"*

Junior is an **AI-first IDE** designed specifically for professional programmers who have a preference for customizing and fine-tuning their tools. 

With Junior, developers get a unique space where they can work hand-in-hand with AI throughout the development process. By using structured task descriptors and spotlighting relevant parts of a project, tasks like code implementation, documentation, and testing can be seamlessly delegated to Junior.

At its core, Junior embraces a design philosophy that prioritizes simplicity, configurability, and auditability. This ensures that the platform remains both accessible to its users and adaptable to a variety of use-cases.

Junior has been crafted exclusively with AI-powered coding right from its early days, way before its core functionalities were in place. This demonstrates Junior's pioneering approach to harnessing the potential of artificial intelligence in software development.

## Getting Started

For guidance on using Junior, please refer to [usage.md](usage.md).

## Contributing and Support

Your contributions make a difference! At Junior, we value the collaboration of the community. Your role as a contributor is to monitor the development, provide detailed prompts, and thoroughly review the generated outcomes.

For questions or assistance, please raise an issue in our GitHub repository.

**Note:** We've tested Junior primarily with the ChatGPT Plus model. However, you're welcome to experiment with similarly capable models and share your findings. It's not compatible with GPT-3.5.
EOF
echo "\033[32mDone: Corrected naming in README.md\033[0m\n"

echo "\033[32mDone: $goal\033[0m\n"